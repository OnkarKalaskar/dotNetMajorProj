// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PopcornBackend.Models;

#nullable disable

namespace PopcornBackend.Migrations
{
    [DbContext(typeof(MajorProjectDbContext))]
    [Migration("20230531083150_addedDefaultUser")]
    partial class addedDefaultUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PopcornBackend.Models.ClientMediaType", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("ClientsMedia", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.MediaCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("MediaCategories", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.MediaType", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MediaId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MediaName");

                    b.HasKey("MediaId");

                    b.ToTable("MediaTypes", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<string>("MovieDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("MovieDescription");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("MovieName");

                    b.Property<string>("MoviePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("MoviePath");

                    b.Property<string>("MoviePoster")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("MoviePoster");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("MovieId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MovieName");

                    b.HasIndex("UserId");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.Singer", b =>
                {
                    b.Property<int>("SingerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SingerId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SingerId"));

                    b.Property<string>("SingerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SingerName");

                    b.HasKey("SingerId");

                    b.ToTable("Singers", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SongId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<string>("SongDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SongDescription");

                    b.Property<string>("SongGeneration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SongGeneration");

                    b.Property<string>("SongLyrics")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("SongLyrics");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SongName");

                    b.Property<string>("SongPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SongPath");

                    b.Property<string>("SongPoster")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("SongPoster");

                    b.Property<string>("SongType")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("SongType");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("SongId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SongLyrics");

                    b.HasIndex("SongName");

                    b.HasIndex("UserId");

                    b.ToTable("Songs", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.SongSinger", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("SingerId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "SingerId");

                    b.HasIndex("SingerId");

                    b.ToTable("SongSingers", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PlanName");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Price");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.TvShow", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TvShowId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("Likes");

                    b.Property<string>("ShowDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("TvShowDescription");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TvShowName");

                    b.Property<string>("ShowPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("TvShowPath");

                    b.Property<string>("ShowPoster")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("TvShowPoster");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ShowId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShowName");

                    b.HasIndex("UserId");

                    b.ToTable("TvShows", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AlternateMobileNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AlternateMobileNo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<int>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("IsApproved");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MobileNo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("SubscriptionEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubscriptionEnd");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriptionStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("SubscriptionStart");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.UserMovie", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("FavMovies", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.UserSong", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("FavSongs", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.UserTvShow", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("TvShowId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TvShowId");

                    b.HasIndex("TvShowId");

                    b.ToTable("FavTvShow", (string)null);
                });

            modelBuilder.Entity("PopcornBackend.Models.ClientMediaType", b =>
                {
                    b.HasOne("PopcornBackend.Models.User", "UserRef")
                        .WithMany("ClientMediaType")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.MediaType", "MediaTypeRef")
                        .WithMany("ClientMediaType")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaTypeRef");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.Movie", b =>
                {
                    b.HasOne("PopcornBackend.Models.MediaCategory", "CategoryRef")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "User")
                        .WithMany("Movie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryRef");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PopcornBackend.Models.Song", b =>
                {
                    b.HasOne("PopcornBackend.Models.MediaCategory", "CategoryRef")
                        .WithMany("Songs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "User")
                        .WithMany("Song")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryRef");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PopcornBackend.Models.SongSinger", b =>
                {
                    b.HasOne("PopcornBackend.Models.Singer", "SingerRef")
                        .WithMany("SongSinger")
                        .HasForeignKey("SingerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.Song", "SongRef")
                        .WithMany("SongSinger")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SingerRef");

                    b.Navigation("SongRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.TvShow", b =>
                {
                    b.HasOne("PopcornBackend.Models.MediaCategory", "CategoryRef")
                        .WithMany("TvShows")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "User")
                        .WithMany("TvShow")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryRef");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PopcornBackend.Models.User", b =>
                {
                    b.HasOne("PopcornBackend.Models.Subscription", "SubscriptionRef")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("SubscriptionRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.UserMovie", b =>
                {
                    b.HasOne("PopcornBackend.Models.Movie", "MovieRef")
                        .WithMany("UserMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "UserRef")
                        .WithMany("UserMovie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieRef");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.UserSong", b =>
                {
                    b.HasOne("PopcornBackend.Models.Song", "SongRef")
                        .WithMany("UserSong")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "UserRef")
                        .WithMany("UserSong")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SongRef");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.UserTvShow", b =>
                {
                    b.HasOne("PopcornBackend.Models.TvShow", "TvShowRef")
                        .WithMany("UserTvShow")
                        .HasForeignKey("TvShowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PopcornBackend.Models.User", "UserRef")
                        .WithMany("UserTvShow")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TvShowRef");

                    b.Navigation("UserRef");
                });

            modelBuilder.Entity("PopcornBackend.Models.MediaCategory", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Songs");

                    b.Navigation("TvShows");
                });

            modelBuilder.Entity("PopcornBackend.Models.MediaType", b =>
                {
                    b.Navigation("ClientMediaType");
                });

            modelBuilder.Entity("PopcornBackend.Models.Movie", b =>
                {
                    b.Navigation("UserMovie");
                });

            modelBuilder.Entity("PopcornBackend.Models.Singer", b =>
                {
                    b.Navigation("SongSinger");
                });

            modelBuilder.Entity("PopcornBackend.Models.Song", b =>
                {
                    b.Navigation("SongSinger");

                    b.Navigation("UserSong");
                });

            modelBuilder.Entity("PopcornBackend.Models.Subscription", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PopcornBackend.Models.TvShow", b =>
                {
                    b.Navigation("UserTvShow");
                });

            modelBuilder.Entity("PopcornBackend.Models.User", b =>
                {
                    b.Navigation("ClientMediaType");

                    b.Navigation("Movie");

                    b.Navigation("Song");

                    b.Navigation("TvShow");

                    b.Navigation("UserMovie");

                    b.Navigation("UserSong");

                    b.Navigation("UserTvShow");
                });
#pragma warning restore 612, 618
        }
    }
}
